name: BackEnd Pipeline

on:
  push:
    branches:
      - main
    pull_request:
      branches: [main]    
      types: [opened, synchronize]

jobs:
  backend_testing: 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:          
          python-version: '3.10'
      
      - name: Check directory
        run: |
          cd backend
          pwd
          ls -l
      
      - name: Create venv
        run: |
          cd backend
          python3 -m venv venv
      
      - name: Activate venv
        run: |
          cd backend
          source venv/bin/activate
      
      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r reqs.txt

      - name: Safety dependencies
        run: |
          cd backend
          safety check

      - name: Black code
        run: |
          cd backend
          black .

      - name: Unit tests 
        run: |
          cd backend
          export PYTHONPATH=$(pwd)
          pytest tests/unit_user.py tests/unit_email.py

      #- name: API tests
#        run: |
#          cd backend
#          export PYTHONPATH=$(pwd)
#          pytest --pyargs tests/ -vv
#        env:
#          FLASK_APP: ${{ secrets.FLASK_APP }}
#          FLASK_ENV: ${{ secrets.FLASK_ENV }}
#          FLASK_DEBUG: ${{ secrets.FLASK_DEBUG }}
#          FLASK_RUN_HOST: ${{ secrets.FLASK_RUN_HOST }}
#          FLASK_RUN_PORT: ${{ secrets.FLASK_RUN_PORT }}
#          DATABASE_URI: ${{ secrets.DATABASE_URI }}
#          SERVER_NAME: ${{ secrets.SERVER_NAME }}
#          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
#          SMTP_USER: ${{ secrets.SMTP_USER }}
#          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
#          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
#          SMTP_PORT: ${{ secrets.SMTP_PORT }}
#          APP_URL: ${{ secrets.APP_URL }}
#          PROD_FRONT_URL: ${{ secrets.PROD_FRONT_URL }}
#          DEV_FRONT_URL: ${{ secrets.DEV_FRONT_URL }}
#          ELASTIC_USER: ${{ secrets.ELASTIC_USER }}
#          ELASTIC_PASSWORD: ${{secrets.ELASTIC_PASSWORD}}

  backend_deployment:
    if: ${{ github.event_name == 'push' && !contains(toJson(github.event.commits.*.message), '#skipback') }}
    needs: backend_testing
    runs-on: ubuntu-latest
    steps:
      - name: SSH script
        uses: appleboy/ssh-action@v1.0.3
        env:
          DATABASE_URI: ${{ secrets.DATABASE_URI }}
          GIT_API_TOKEN: ${{ secrets.GIT_API_TOKEN }}
          FLASK_APP: ${{ secrets.FLASK_APP }}
          FLASK_ENV: ${{ secrets.FLASK_ENV }}
          FLASK_DEBUG: ${{ secrets.FLASK_DEBUG }}
          FLASK_RUN_HOST: ${{ secrets.PROD_FLASK_RUN_HOST }}
          FLASK_RUN_PORT: ${{ secrets.FLASK_RUN_PORT }}
          SERVER_NAME: ${{ secrets.PROD_SERVER_NAME }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          APP_URL: ${{ secrets.APP_URL }}
          PROD_FRONT_URL: ${{ secrets.PROD_FRONT_URL }}
          DEV_FRONT_URL: ${{ secrets.DEV_FRONT_URL }}
          ELASTIC_USER: ${{ secrets.ELASTIC_USER }}
          ELASTIC_PASSWORD: ${{secrets.ELASTIC_PASSWORD}}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script_stop: true
          envs: ELASTIC_USER, ELASTIC_PASSWORD, FLASK_ENV, FLASK_DEBUG, FLASK_RUN_HOST, FLASK_RUN_PORT, DATABASE_URI, SERVER_NAME, JWT_SECRET_KEY, SMTP_USER, SMTP_PASSWORD, SMTP_SERVER, SMTP_PORT, APP_URL, PROD_FRONT_URL, DEV_FRONT_URL

          script: |
            ls -all
            git clone https://oauth2:$GIT_API_TOKEN@github.com/valwolfor/Email_App.git || ls
            cd Email_App
            cd backend
            git checkout
            git fetch --all
            git reset --hard origin
            git pull origin
            virtualenv venv
            source venv/bin/activate
            pip install -r reqs.txt
            export DATABASE_URI=$DATABASE_URI
            export FLASK_APP=$FLASK_APP
            export FLASK_ENV=$FLASK_ENV
            export FLASK_DEBUG=$FLASK_DEBUG
            export FLASK_RUN_HOST=$FLASK_RUN_HOST
            export FLASK_RUN_PORT=$FLASK_RUN_PORT
            export SERVER_NAME=$SERVER_NAME
            export JWT_SECRET_KEY=$JWT_SECRET_KEY
            export SMTP_USER=$SMTP_USER
            export SMTP_PASSWORD=$SMTP_PASSWORD
            export SMTP_SERVER=$SMTP_SERVER
            export SMTP_PORT=$SMTP_PORT
            export APP_URL=$APP_URL
            export PROD_FRONT_URL=$PROD_FRONT_URL
            export DEV_FRONT_URL=$DEV_FRONT_URL
            export ELASTIC_USER=$ELASTIC_USER
            export ELASTIC_PASSWORD=$ELASTIC_PASSWORD
            killall gunicorn || ls
            gunicorn --bind 0.0.0.0:8001 main:app --daemon

      - name: Visit EC2
        run: |
          app_url=$PROD_PROXY_URL
          curl -I $app_url
        env:
          PROD_PROXY_URL: ${{ secrets.PROD_PROXY_URL }}
